InflammationSeverityLEVEL,
MicrobialOrganismsLEVEL)
par(mar = c(6.5, 6.5, 0.5, 0.5), mgp = c(5, 1, 0))
p <- ggplot(data=Melted[!is.na(Melted["level"]),],
aes_string(x="level", y="Abundance",fill="OTU")) +
geom_bar(stat="identity", position="fill") +
theme(legend.position = "bottom") + facet_grid(. ~ variable) +
theme(axis.text.x = element_text(hjust = 1))
x <- subset.genus.df_cecum %>% dplyr::select(OTU,Abundance,
OverallArchitectureLEVEL,
MucosalIntegrityLEVEL,
LymphoidImmuneLEVEL,
InflammationSeverityLEVEL,
MicrobialOrganismsLEVEL)
phyloseq_ob_agg_cecum <- get_top_taxa(
phyloseq_ob_agg_cecum,
15,
relative = TRUE,
discard_other = FALSE,
other_label = "Other"
)
###load libraries panels tabs####
library(phyloseq) #
library(DESeq2) #
library(kableExtra) #
library(genefilter) #
library(microbiome) #
library(ggplot2)  #
library(vegan) #
library(ggpubr) #
library(ggplot2) #
library(plyr)
library(multcompView)
#####Load libraries correlations####
library(ggplot2)
library(phyloseq)
library(stringr)
library(dplyr)
#####Load libraries LR####
library(tidyverse)
library(ape)
library(ggpubr)
####Load libraries categorical histo####
library(kableExtra)
library(plyr)
library("fantaxtic")
library(data.table)
####load libraries Ratios-histo boxplots####
library(multcompView)
library(reshape)
### OTRICAS
library(plotly)
library(plyr)
library(flexdashboard)
library(shiny)
library(DT)
library(stringr)
## FUNCTIONS
source("/Volumes/GoogleDrive/Mi unidad/SIWAproject/Methods-review/functions.R")
#open phyloseq object
#folder <- "/Users/mcadavid/Documents/Reports_review/E335_Maria/"
#ODLEPobj <- readRDS(paste0(folder, "phyloseqObject_April11.rds"))
#open data-table
## Data creada con create_full_file_for_correlations_to_analytics - Jupyter Notebook
#complete_sample_table <-read.table(paste0(folder, "performance_histo_ge_ratios_alphadiv_for_correlations.csv"),check.names = FALSE, header=T, sep="\t")
#EAFIT surveillance tables (same for all reports)
#species_taxonomy_info <-read.csv(paste0(folder, "species_metabolic_effects.csv"),check.names = FALSE, sep=";")
#genera_taxonomy_info <- read.csv(paste0(folder, "genus_metabolic_effects.csv"), check.names = FALSE, sep=";")
#broad_taxonomy_info <- read.csv(paste0(folder, "broad_groups_metabolic_effects.csv"), check.names = FALSE, sep=";")
#open phyloseq object
ODLEPobj <- readRDS("/Users/mcadavid/Documents/Reports_review/E335_Maria/phyloseqObject_April11.rds")
#open data-table
## Data creada con create_full_file_for_correlations_to_analytics - Jupyter Notebook
complete_sample_table <-read.table("/Users/mcadavid/Documents/Reports_review/E335_Maria/Subset_exp1/Correlations/performance_histo_ge_ratios_alphadiv_for_correlations.csv",check.names = FALSE, header=T, sep="\t")
#EAFIT surveillance tables (same for all reports)
species_taxonomy_info <-read.csv(file="/Users/mcadavid/Documents/Reports_review/Metabolic_effects_table_V2/species_metabolic_effects.csv",check.names = FALSE, sep=";")
genera_taxonomy_info <- read.csv(file="/Users/mcadavid/Documents/Reports_review/Metabolic_effects_table_V2/genus_metabolic_effects.csv", check.names = FALSE, sep=";")
broad_taxonomy_info <- read.csv(file="/Users/mcadavid/Documents/Reports_review/Metabolic_effects_table_V2/broad_groups_metabolic_effects.csv", check.names = FALSE, sep=";")
#Deseq outputs
dfs_filtered <- readRDS(file="/Volumes/GoogleDrive/Mi unidad/SIWAproject/Reports/Version1.0/Input_data/dfs_filtered.RData")
meta_exp  <-complete_sample_table
#as character and round up
meta_exp$OverallArchitecture <- as.character(ceiling(meta_exp$OverallArchitecture))
meta_exp$MucosalIntegrity <- as.character(ceiling(meta_exp$MucosalIntegrity))
meta_exp$LymphoidImmune <- as.character(ceiling(meta_exp$LymphoidImmune))
meta_exp$InflammationSeverity <- as.character(ceiling(meta_exp$InflammationSeverity))
meta_exp$MicrobialOrganisms <- as.character(ceiling(meta_exp$MicrobialOrganisms))
#meta_exp <- meta_exp[complete.cases(meta_exp),] #keep only the ones with no missing values, im not using it because i want to keep all
#define levels
levels = c("0", "1", "2", "3", "4", "5")
meta_exp$OverallArchitecture <- factor(meta_exp$OverallArchitecture, levels=levels)
meta_exp$MucosalIntegrity <- factor(meta_exp$MucosalIntegrity, levels=levels)
meta_exp$LymphoidImmune <- factor(meta_exp$LymphoidImmune, levels=levels)
meta_exp$InflammationSeverity <- factor(meta_exp$InflammationSeverity, levels=levels)
meta_exp$MicrobialOrganisms <- factor(meta_exp$MicrobialOrganisms, levels=levels)
for (i in c("InflammationSeverity", "MicrobialOrganisms", "OverallArchitecture")){
print(i)
meta_exp[meta_exp[,i] %in%  c("0","1"), paste0(i, "LEVEL")] <- "Mild"
meta_exp[meta_exp[,i] %in%  c("2","3"), paste0(i, "LEVEL")] <- "Mod"
meta_exp[meta_exp[,i] %in%  c("4","5"), paste0(i, "LEVEL")] <- "Sev"
}
meta_exp[meta_exp[,"LymphoidImmune"] %in%  c("0","1", "2"), paste0("LymphoidImmune", "LEVEL")] <- "Mild"
meta_exp[meta_exp[,"LymphoidImmune"] %in%  c("3","4"), paste0("LymphoidImmune", "LEVEL")] <- "Mod"
meta_exp[meta_exp[,"LymphoidImmune"] %in%  c("5"), paste0("LymphoidImmune", "LEVEL")] <- "Sev"
meta_exp[meta_exp[,"MucosalIntegrity"] %in%  c("0"), paste0("MucosalIntegrity", "LEVEL")] <- "Mild"
meta_exp[meta_exp[,"MucosalIntegrity"] %in%  c("1","2"), paste0("MucosalIntegrity", "LEVEL")] <- "Mod"
meta_exp[meta_exp[,"MucosalIntegrity"] %in%  c("3", "4", "5"), paste0("MucosalIntegrity", "LEVEL")] <- "Sev"
levels = c("Mod", "Mild", "Sev")
meta_exp$OverallArchitectureLEVEL <- factor(meta_exp$OverallArchitectureLEVEL, levels=levels)
meta_exp$MucosalIntegrityLEVEL <- factor(meta_exp$MucosalIntegrityLEVEL, levels=levels)
meta_exp$LymphoidImmuneLEVEL <- factor(meta_exp$LymphoidImmuneLEVEL, levels=levels)
meta_exp$InflammationSeverityLEVEL <- factor(meta_exp$InflammationSeverityLEVEL, levels=levels)
meta_exp$MicrobialOrganismsLEVEL <- factor(meta_exp$MicrobialOrganismsLEVEL, levels=levels)
#Mirar otra vez la distribucion de los puntajes de cada score pero ahora en categorias
histo <- meta_exp %>% dplyr::select(OverallArchitectureLEVEL, MucosalIntegrityLEVEL, LymphoidImmuneLEVEL,
InflammationSeverityLEVEL,  MicrobialOrganismsLEVEL, SampleLocation, SampleID)
#colnames(histo)
freq_c<- sapply(subset(histo[histo$SampleLocation == 'C', ], select = -c(SampleLocation,SampleID)), table)
table_sample_count_cecum <- as.data.frame(freq_c)
colnames(table_sample_count_cecum) <- str_replace(colnames(freq_c), "LEVEL", "")
freq_i<- sapply(subset(histo[histo$SampleLocation == 'I', ], select = -c(SampleLocation,SampleID)), table)
table_sample_count_ileum <- as.data.frame(freq_i)
colnames(table_sample_count_ileum) <- str_replace(colnames(freq_i), "LEVEL", "")
rownames(histo) <- histo$SampleID
#colnames(histo)
ps <- merge_phyloseq(ODLEPobj, sample_data(histo))
#sample_data(ps)
ODLEPobj_rel <- microbiome::transform(ps, "compositional") #relative abundance
###aggregate taxa
taxonomy <-as.data.frame(tax_table(ODLEPobj_rel))
taxonomy <- dplyr::select(taxonomy,-c(SciName))
taxa_level <- "Genus"
phyloseq_ob_agg <-
microbiome::aggregate_taxa(ODLEPobj_rel, taxa_level)
phyloseq_ob_agg <-
phyloseq::prune_taxa(unique(taxonomy %>% pull(taxa_level)), phyloseq_ob_agg)
#Separate phyloseq object by location
phyloseq_ob_agg_cecum<-subset_samples(phyloseq_ob_agg, SampleLocation=="C")
phyloseq_ob_agg_ileum<-subset_samples(phyloseq_ob_agg, SampleLocation=="I")
phyloseq_ob_agg_cecum <- get_top_taxa(
phyloseq_ob_agg_cecum,
15,
relative = TRUE,
discard_other = FALSE,
other_label = "Other"
)
subset.genus.df_cecum <- psmelt(phyloseq_ob_agg_cecum)
View(subset.genus.df_cecum)
phyloseq_ob_agg_ileum <- get_top_taxa(phyloseq_ob_agg_ileum, 15, relative=TRUE, discard_other=FALSE,
other_label = "Other")
subset.genus.df_ileum <- psmelt(phyloseq_ob_agg_ileum)
phyloseq_ob_agg_cecum <- get_top_taxa(phyloseq_ob_agg_cecum, 15, relative = TRUE, discard_other = FALSE, other_label = "Other")
subset.genus.df_cecum <- psmelt(phyloseq_ob_agg_cecum)
phyloseq_ob_agg_ileum <- get_top_taxa(phyloseq_ob_agg_ileum, 15, relative=TRUE, discard_other=FALSE, other_label = "Other")
subset.genus.df_ileum <- psmelt(phyloseq_ob_agg_ileum)
categories <-  list("OverallArchitectureLEVEL","MucosalIntegrityLEVEL", "LymphoidImmuneLEVEL","InflammationSeverityLEVEL","MicrobialOrganismsLEVEL")
categories_labels <- c(
"OverallArchitectureLEVEL"="Overall Architecture",
"MucosalIntegrityLEVEL"="Mucosal Integrity",
"LymphoidImmuneLEVEL"="Lymphoid Immune",
"InflammationSeverityLEVEL"= "Inflammation Severity",
"MicrobialOrganismsLEVEL" = "Microbial Organisms"
)
View(table_sample_count_ileum)
View(table_sample_count_cecum)
View(table_sample_count_ileum)
View(table_sample_count_cecum)
View(table_sample_count_ileum)
par(mar = c(6.5, 6.5, 0.5, 0.5), mgp = c(5, 1, 0))
p <- ggplot(data=Melted[!is.na(Melted["level"]),],
aes_string(x="level", y="Abundance",fill="OTU")) +
geom_bar(stat="identity", position="fill") +
theme(legend.position = "bottom") + facet_grid(. ~ variable) +
theme(axis.text.x = element_text(hjust = 1))
x <- subset.genus.df_cecum %>% dplyr::select(OTU,Abundance,
OverallArchitectureLEVEL,
MucosalIntegrityLEVEL,
LymphoidImmuneLEVEL,
InflammationSeverityLEVEL,
MicrobialOrganismsLEVEL)
Melted <- gather(
x,
key = "variable",
value = "level",
OverallArchitectureLEVEL,
MucosalIntegrityLEVEL,
LymphoidImmuneLEVEL,
InflammationSeverityLEVEL,
MicrobialOrganismsLEVEL
)
Melted$variable <- str_replace(Melted$variable, "LEVEL", "")
subset.genus.df_cecum %>%
gather(Ratio, Value, -SampleID)
par(mar = c(6.5, 6.5, 0.5, 0.5), mgp = c(5, 1, 0))
p <- ggplot(data=Melted[!is.na(Melted["level"]),],
aes_string(x="level", y="Abundance",fill="OTU")) +
geom_bar(stat="identity", position="fill") +
theme(legend.position = "bottom") + facet_grid(. ~ variable) +
theme(axis.text.x = element_text(hjust = 1))
ggplotly(p) %>%
layout(
xaxis = list(automargin=TRUE), yaxis = list(automargin=TRUE) #,
#legend = list(orientation="h", y=-0.2, title = list(text = "Genus"))
) %>% partial_bundle()
par(mar = c(6.5, 6.5, 0.5, 0.5), mgp = c(5, 1, 0))
p <- ggplot(data=Melted[!is.na(Melted["level"]),],
aes_string(x="level", y="Abundance",fill="OTU")) +
geom_bar(stat="identity", position="fill") +
theme(legend.position = "bottom") + facet_grid(. ~ variable) +
theme(axis.text.x = element_text(hjust = 1))
ggplotly(p) %>%
layout(
xaxis = list(automargin=TRUE), yaxis = list(automargin=TRUE) ,
legend = list(orientation = "h",   # show entries horizontally
xanchor = "center",  # use center of legend as anchor
x = 0.5)
#legend = list(orientation="h", y=-0.2, title = list(text = "Genus"))
) %>% partial_bundle()
par(mar = c(6.5, 6.5, 0.5, 0.5), mgp = c(5, 1, 0))
p <- ggplot(data=Melted[!is.na(Melted["level"]),],
aes_string(x="level", y="Abundance",fill="OTU")) +
geom_bar(stat="identity", position="fill") +
theme(legend.position = "bottom") + facet_grid(. ~ variable) +
theme(axis.text.x = element_text(hjust = 1))
ggplotly(p) %>%
layout(
xaxis = list(automargin=TRUE), yaxis = list(automargin=TRUE),
legend = list(xanchor = "center",  # use center of legend as anchor
x = 0.5)) %>% partial_bundle()
par(mar = c(6.5, 6.5, 0.5, 0.5), mgp = c(5, 1, 0))
p <- ggplot(data=Melted[!is.na(Melted["level"]),],
aes_string(x="level", y="Abundance",fill="OTU")) +
geom_bar(stat="identity", position="fill") +
theme(legend.position = "bottom") + facet_grid(. ~ variable) +
theme(axis.text.x = element_text(hjust = 1))
ggplotly(p) %>%
layout(
xaxis = list(automargin=TRUE), yaxis = list(automargin=TRUE)) %>% partial_bundle()
options(knitr.kable.NA = 0)
kbl(table_sample_count_ileum, row.names = TRUE) %>% kable_styling(position= "left", full_width = T)
GENE <- complete_sample_table
#Add treatments and treatment numbers (1-8)
GENE <- GENE %>%
mutate(Treatment = if_else(KitID == 70, "LowCa",
ifelse(KitID == 71, "LowCa+VitD",
ifelse(KitID == 72, "MediumLowCa",
ifelse(KitID == 73, "MediumLowCa+VitD",
ifelse(KitID == 74, "MediumHighCa",
ifelse(KitID == 75, "MediumHighCa+VitD",
ifelse(KitID == 76, "HighCa","HighCa+VitD"))))))))
GENE <- GENE %>%
mutate(TreatmentNumber = if_else(KitID == 70, 1,
ifelse(KitID == 71, 2,
ifelse(KitID == 72, 3,
ifelse(KitID == 73, 4,
ifelse(KitID == 74, 5,
ifelse(KitID == 75, 6,
ifelse(KitID == 76, 7,8))))))))
GENE <- GENE %>%
mutate(Alphalevel = if_else(KitID == 70, "0 VitD",
ifelse(KitID == 71, "VitD",
ifelse(KitID == 72, "0 VitD",
ifelse(KitID == 73, "VitD",
ifelse(KitID == 74, "0 VitD",
ifelse(KitID == 75, "VitD",
ifelse(KitID == 76, "0 VitD","VitD"))))))))
GENE$TreatmentNumber = as.factor(GENE$TreatmentNumber)
GENE$SampleLocation = as.factor(GENE$SampleLocation)
#Table:Samples by treatments
treatments = data.frame(table(GENE$TreatmentNumber))
colnames(treatments)=c("Treatment","Number of samples")
#Table:Samples by Samplelocation
location = data.frame(table(GENE$SampleLocation))
colnames(location)=c("Sample Location","Number of samples")
#Subset kits de interés y separar por location
subset <- GENE[GENE$TreatmentNumber %in% c(1,2,3,4,5,6,7,8),]
cec <- subset[subset$SampleLocation == "C",]
il <- subset[subset$SampleLocation == "I",]
#Calcular referencias (en este caso uso el tratamiento 3-MEDIUMLOWCA como mi control para el delta delta)
ref_value_IL10_i <- mean(il[il$TreatmentNumber == "3",]$DeltaCq_IL10)
ref_value_IL1B_i <- mean(il[il$TreatmentNumber == "3",]$DeltaCq_IL1B)
ref_value_MUC2_i <- mean(il[il$TreatmentNumber == "3",]$DeltaCq_MUC2)
ref_value_IL10_c <- mean(cec[cec$TreatmentNumber == "3",]$DeltaCq_IL10)
ref_value_IL1B_c <- mean(cec[cec$TreatmentNumber == "3",]$DeltaCq_IL1B)
ref_value_MUC2_c <- mean(cec[cec$TreatmentNumber == "3",]$DeltaCq_MUC2)
#Cecum calculations deltadelta and rq and new log transformation
cec$DD_IL1B<-cec$DeltaCq_IL1B - ref_value_IL1B_c
cec$RQ_IL1B<- (2^(-cec$DD_IL1B))
cec$RQ_IL1B_log<-(-log(cec$RQ_IL1B))
cec$DD_IL10<-cec$DeltaCq_IL10 - ref_value_IL10_c
cec$RQ_IL10<- 2^(-cec$DD_IL10)
cec$RQ_IL10_log<-(-log(cec$RQ_IL10))
cec$DD_MUC2<-cec$DeltaCq_MUC2 - ref_value_MUC2_c
cec$RQ_MUC2<- (2^(-cec$DD_MUC2))
cec$RQ_MUC2_log<-(-log(cec$RQ_MUC2))
#Ileum calculations deltadelta and rq and new log transformation
il$DD_IL1B<-il$DeltaCq_IL1B - ref_value_IL1B_i
il$RQ_IL1B<- (2^(-il$DD_IL1B))
il$RQ_IL1B_log<-(-log(il$RQ_IL1B))
il$DD_IL10<-il$DeltaCq_IL10 - ref_value_IL10_i
il$RQ_IL10<- 2^(-il$DD_IL10)
il$RQ_IL10_log<-(-log(il$RQ_IL10))
il$DD_MUC2<-il$DeltaCq_MUC2 - ref_value_MUC2_i
il$RQ_MUC2<- (2^(-il$DD_MUC2))
il$RQ_MUC2_log<-(-log(il$RQ_MUC2))
#Statistics for Deltacq values
#(note: when computing the anova with the logtransformed values we get the exact same pvalues)
#compute anova on treatment
res.aov1= aov(DeltaCq_IL1B ~ Treatment, data=cec)
res.aov2= aov(DeltaCq_IL10 ~ Treatment, data=cec)
res.aov3= aov(DeltaCq_MUC2 ~ Treatment, data=cec)
res.aov4= aov(DeltaCq_IL1B ~ Treatment, data=il)
res.aov5= aov(DeltaCq_IL10 ~ Treatment, data=il)
res.aov6= aov(DeltaCq_MUC2 ~ Treatment, data=il)
#summary anova on treatment
#summary(res.aov1) #pval= 0.025*
#summary(res.aov2) #pval= 0.009**
#summary(res.aov3) #pval= 0.787
#summary(res.aov4) #pval= 0.00192**
#summary(res.aov5) #pval= 0.123
#summary(res.aov6) #pval= 0.17
#tukey
tukey1 = TukeyHSD(res.aov1) #*
tukey2 = TukeyHSD(res.aov2) #**
tukey3 = TukeyHSD(res.aov3)
tukey4 = TukeyHSD(res.aov4) #**
tukey5 = TukeyHSD(res.aov5)
tukey6 = TukeyHSD(res.aov6)
#Define letters to add statistics to the graph
cld <- multcompLetters4(res.aov1, tukey1)
IL1B_cec <- data.frame(letters = cld$'Treatment'$Letters)
IL1B_cec$Treatment <- rownames(IL1B_cec)
names(IL1B_cec)[1] <- "IL1B_cec"
cld <- multcompLetters4(res.aov2, tukey2)
IL10_cec <- data.frame(letters = cld$'Treatment'$Letters)
IL10_cec$Treatment <- rownames(IL10_cec)
names(IL10_cec)[1] <- "IL10_cec"
cld <- multcompLetters4(res.aov3, tukey3)
MUC2_cec <- data.frame(letters = cld$'Treatment'$Letters)
MUC2_cec$Treatment <- rownames(MUC2_cec)
names(MUC2_cec)[1] <- "MUC2_cec"
cld <- multcompLetters4(res.aov4, tukey4)
IL1B_ile  <- data.frame(letters = cld$'Treatment'$Letters)
IL1B_ile$Treatment <- rownames(IL1B_ile)
names(IL1B_ile)[1] <- "IL1B_ile"
cld <- multcompLetters4(res.aov5, tukey5)
IL10_ile <- data.frame(letters = cld$'Treatment'$Letters)
IL10_ile$Treatment <- rownames(IL10_ile)
names(IL10_ile)[1] <- "IL10_ile"
cld <- multcompLetters4(res.aov6, tukey6)
MUC2_ile <- data.frame(letters = cld$'Treatment'$Letters)
MUC2_ile$Treatment <- rownames(MUC2_ile)
names(MUC2_ile)[1] <- "MUC2_ile"
View(IL10_cec)
View(IL10_ile)
View(IL1B_cec)
View(IL10_cec)
View(IL1B_ile)
View(IL10_ile)
#ileum (plots with letters for statistics)
meansile <- aggregate(RQ_IL1B_log ~  Treatment, il, mean)
il <- il %>%
mutate( Treatment=factor(Treatment,levels=c("LowCa", "LowCa+VitD", "MediumLowCa", "MediumLowCa+VitD", "MediumHighCa", "MediumHighCa+VitD", "HighCa","HighCa+VitD")) )
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7)) +
geom_text(data = IL1B_ile, aes(x = Treatment, y = 5, label = IL1B_ile), size = 5)
plot1
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7)) +
#geom_text(data = IL1B_ile, aes(x = Treatment, y = 5, label = IL1B_ile), size = 5)
plot1
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7)) #+
#geom_text(data = IL1B_ile, aes(x = Treatment, y = 5, label = IL1B_ile), size = 5)
plot1
View(IL1B_ile)
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7))
geom_text(data = IL1B_ile, aes(x = Treatment, y = 7, label = IL1B_ile), size = 5)
,plot1
plot1
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7))
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7)) +
geom_text(data = IL1B_ile, aes(x = Treatment, y = 7, label = IL1B_ile), size = 5)
plot1
View(location)
View(IL1B_ile)
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7)) +
geom_text(data = IL1B_ile, aes(x = Treatment, y = 7, label = IL1B_ile), size = 5)
plot1 <- ggplot(il, aes(x = Treatment, y = RQ_IL1B_log, fill = Treatment)) +
geom_violin() + #geom_boxplot()+  #or geom_violin()
xlab("") +
ylab("Log-fold-change") +  geom_hline(yintercept=0, linetype="dashed") +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
stat_summary(fun=mean, geom="point", size=2, color="red", fill="red")+
geom_text(data = meansile, aes(label = round(RQ_IL1B_log,2), y = RQ_IL1B_log + 0.2),
position = position_dodge(width = 1),vjust = -0.5, size = 4)+
coord_cartesian(ylim =  c(-5, 7)) +
geom_text(data = IL1B_ile, aes(x = Treatment, y = 7, label = IL1B_ile), size = 5)
plot1
genera_taxonomy_info$Species <- "All species"
df=  rbind(species_taxonomy_info,genera_taxonomy_info)
df=df[c("Genus","Species","Key_Findings", "Probiotic_potential", "Takeaways")]
colnames(df)[3] <- "Key_Findings"
colnames(df)[4] <- "Probiotic_Potential"
colnames(df)[5] <- "Proven_Traits"
brks <- quantile(df$Probiotic_Potential, probs = seq(.05, .95, .05), na.rm = TRUE)
#clrs <- round(seq(255, 40, length.out = length(brks) + 1), 0) %>% {paste0("rgb(255,", ., ",", ., ")")}
ramp <- colorRampPalette(c("#cb766e", "#a3d291"))
clrs <- ramp(length(brks)+1)
DT::datatable(df %>% select(-Key_Findings),
rownames = FALSE, options = list(pageLength = 10)
) %>% formatStyle(
'Probiotic_Potential',
backgroundColor = styleInterval(brks, clrs)
)
df_2=broad_taxonomy_info[c("Group_Name","Finner_Classification", "Key_Findings")]
colnames(df_2)[2] <- "Taxonomic_level"
colnames(df_2)[3] <- "Key_Findings"
DT::datatable(df_2,   height = 1000000,
rownames = FALSE, options = list(pageLength = 10)
)
df_2=broad_taxonomy_info[c("Group_Name","Finner_Classification", "Key_Findings")]
colnames(df_2)[2] <- "Taxonomic_level"
colnames(df_2)[3] <- "Key_Findings"
DT::datatable(df_2,   height = 10,
rownames = FALSE, options = list(pageLength = 10)
)
df_2=broad_taxonomy_info[c("Group_Name","Finner_Classification", "Key_Findings")]
colnames(df_2)[2] <- "Taxonomic_level"
colnames(df_2)[3] <- "Key_Findings"
DT::datatable(df_2,   height = 10000,
rownames = FALSE, options = list(pageLength = 10)
)
df_2
genera_taxonomy_info
#DT::datatable(df_2,   height = 10000,
#  rownames = FALSE, options = list(pageLength = 10))
genera_taxonomy_info
colnames(df_2)[3] <- "Key_Findings"
df_2=broad_taxonomy_info[c("Group_Name","Finner_Classification", "Key_Findings")]
colnames(df_2)[2] <- "Taxonomic_level"
colnames(df_2)[3] <- "Key_Findings"
DT::datatable(df_2,   height = 10000,
rownames = FALSE, options = list(pageLength = 10)
)
